<?xml version="1.0" encoding="utf-8"?>
<comments>
    <row Id="3978752" PostId="3758880" Score="1" Text="The only thing I don't like about it is that 1.0 KB could be displayed prettier as 1 KB. (Which is why I use DecimalFormat in my answer)" CreationDate="2010-09-21T14:33:29.170" UserId="342852" ContentLicense="CC BY-SA 2.5" />
    <row Id="3978983" PostId="3758880" Score="14" Text="I prefer 1.0 KB. Then it's clear how many significant figures the output entails. (This also seems to be the behavior of for instance the `du` command in Linux.)" CreationDate="2010-09-21T14:48:34.237" UserId="276052" ContentLicense="CC BY-SA 2.5" />
    <row Id="24063833" PostId="3758880" Score="21" Text="I think every one should note that in your project customer want see values in base 2 (devided by 1024) but with common prefix. Not KiB, MiB, GiB etc. Use KB, MB, GB, TB for it." CreationDate="2013-05-23T13:33:28.260" UserId="1735347" ContentLicense="CC BY-SA 3.0" />
    <row Id="119554312" PostId="326440" Score="2" Text="@Sam A `StringBuffer` can’t hold that much either. The limitation is that the size is stored as an `int`. I think the most efficient alternative for that size would be `Files.readAllLines()`. I haven’t benchmarked it though." CreationDate="2021-05-21T14:16:46.943" UserId="3474" ContentLicense="CC BY-SA 4.0" />
    <row Id="119557353" PostId="326440" Score="1" Text="@Sam don’t use A when you want B. The fact that `Files.readString` is the most efficient way to read a file *into a single string* doesn’t imply that using it when you actually want something entirely different, like a *list of lines*, was a good idea. As erickson said, there’s `Files.readAllLines​` doing the job." CreationDate="2021-05-21T16:05:32.213" UserId="2711488" ContentLicense="CC BY-SA 4.0" />
    <row Id="51881349" PostId="3758880" Score="6" Text="@Mazyod For iOS developers, you can use [NSByteCountFormatter](https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSByteCountFormatter_Class/index.html). &#xA;&#xA;For example (in swift):&#xA;&#xA;`let bytes = 110592&#xA;NSByteCountFormatter.stringFromByteCount(Int64(bytes), countStyle: NSByteCountFormatterCountStyle.File)`&#xA;would produce &quot;111 KB&quot;" CreationDate="2015-08-13T12:39:51.710" UserId="3458802" ContentLicense="CC BY-SA 3.0" />
    <row Id="55230767" PostId="3758880" Score="2" Text="The code is short, but `charAt`, `?` operator and `String.format` to get the unit isn't human readable ..." CreationDate="2015-11-16T08:23:12.940" UserId="199048" ContentLicense="CC BY-SA 3.0" />
    <row Id="56024872" PostId="3758880" Score="38" Text="@Borys Using &quot;KB&quot; to mean &quot;1024 bytes&quot; is wrong.  Don't do that." CreationDate="2015-12-07T16:34:42.073" UserId="125507" ContentLicense="CC BY-SA 3.0" />
    <row Id="56529652" PostId="3758880" Score="1" Text="@endolith that's an example of prescriptivism vs descriptivism" CreationDate="2015-12-21T11:07:43.617" UserId="638028" ContentLicense="CC BY-SA 3.0" />
    <row Id="56536730" PostId="3758880" Score="5" Text="@endolith not denying it's &quot;wrong&quot; according to the IEC standard. However, its usage is rare compared to the popular usage of MB to mean 1024*1024 bytes. &quot;MB&quot; is used by Windows, for example. Using MiB, although correct (according to IEC), may confuse readers who are unfamiliar with it. It all depends on who your audience is. Anyway, let's not let this detract from my main criticism, which is that this method can produce incorrect results." CreationDate="2015-12-21T14:21:47.767" UserId="638028" ContentLicense="CC BY-SA 3.0" />
    <row Id="61022189" PostId="3758880" Score="9" Text="Readers will learn it. Better something they are unfamiliar with and can learn it than having something wrong. Writing KB a user who is familiar with it will expect 1000 and a user who is unfamiliar will expect 1024." CreationDate="2016-04-19T12:35:10.600" UserId="2952093" ContentLicense="CC BY-SA 3.0" />
    <row Id="73884899" PostId="3758880" Score="4" Text="@KlitosKyriacou &quot;But we know what it means so it's not a big problem&quot; -- I have lost count of the number of times I've spoken with people who think they knew which unit they meant but when questioned they don't have a clue and/or disagree with the person they thought they were in agreement with. Use SI units for base 10 and IEC for base 2 and the world will be a better place." CreationDate="2017-04-14T14:01:57.687" UserId="594137" ContentLicense="CC BY-SA 3.0" />
    <row Id="88598509" PostId="3758880" Score="0" Text="For android developers, you can use https://stackoverflow.com/a/26502430/3940133 instead" CreationDate="2018-06-11T11:08:17.223" UserId="3940133" ContentLicense="CC BY-SA 4.0" />
    <row Id="103556714" PostId="3758880" Score="0" Text="Probably better to use locale-wise &quot;String.format&quot;, e.g. String.format(Locale.US, &quot;%.1f %sB&quot;, bytes / Math.pow(unit, exp), pre)" CreationDate="2019-10-30T11:38:31.043" UserId="6335914" ContentLicense="CC BY-SA 4.0" />
    <row Id="104522451" PostId="3758880" Score="29" Text="**Answer rewritten entirely. Many of the above comments are obsolete.**" CreationDate="2019-12-03T00:03:18.067" UserId="276052" ContentLicense="CC BY-SA 4.0" />
    <row Id="104613266" PostId="3758880" Score="2" Text="Wow :D In your article (really fun read BTW) you've written: &quot;After ironing out all corner cases the code is even less readable than the original version. Personally I would not copy this snippet into production code.&quot; I don't see how is the new snippet more readable :D What are the other reasons that back up this code over the previous one? Performance? Being concise and still without rounding bugs?" CreationDate="2019-12-05T14:46:12.230" UserId="4109604" ContentLicense="CC BY-SA 4.0" />
    <row Id="104615005" PostId="3758880" Score="2" Text="@matvs Ok, I admit that I might have golfed the new version a bit too far. It's not super readable, but it's fairly clear that it's nothing but an unrolled loop at this point.&#xA;&#xA;First of all, this version is _correct_, and I'd argue that it's far less complicated than the previous version. For example, the really funky floating point stuff is gone. The log/pow stuff (which was fun to write but not fun to read) is gone. The si/binary flag (which adds to the complexity but that you typically never care about) is gone.&#xA;&#xA;As for performance, I have no idea :-) Someone should profile it." CreationDate="2019-12-05T15:38:10.347" UserId="276052" ContentLicense="CC BY-SA 4.0" />
    <row Id="104645315" PostId="3758880" Score="0" Text="made slashdot as most copied vulnerability, I assumed it was fixed" CreationDate="2019-12-06T14:07:30.330" UserId="1179388" ContentLicense="CC BY-SA 4.0" />
    <row Id="104652929" PostId="3758880" Score="0" Text="Swift version for humanReadableByteCountSI: https://stackoverflow.com/a/59218639/2430555" CreationDate="2019-12-06T18:44:57.850" UserId="2430555" ContentLicense="CC BY-SA 4.0" />
    <row Id="104681825" PostId="3758880" Score="0" Text="The answer based on the updated code here but in Kotlin https://stackoverflow.com/a/59234917" CreationDate="2019-12-08T11:30:03.527" UserId="1414809" ContentLicense="CC BY-SA 4.0" />
    <row Id="105154126" PostId="3758880" Score="0" Text="This probably explains the reason why my Windows OS and Banana Pie(Ubuntu) shows different file size of the same .jar file. Of course, that can also because of Windows' poor memory management. In any case, here is another fun link:&#xA;&#xA;https://www.zdnet.com/article/the-most-copied-stackoverflow-java-code-snippet-contains-a-bug/" CreationDate="2019-12-26T14:45:36.583" UserId="10037278" ContentLicense="CC BY-SA 4.0" />
    <row Id="112481549" PostId="3758880" Score="0" Text="@aioobe why u are using signum here , u are taking an absolute value already" CreationDate="2020-08-27T05:08:13.493" UserId="4825148" ContentLicense="CC BY-SA 4.0" />
    <row Id="113766963" PostId="3758880" Score="0" Text="That was very nice!!" CreationDate="2020-10-13T14:15:10.870" UserId="4816270" ContentLicense="CC BY-SA 4.0" />
    <row Id="114581084" PostId="3758880" Score="0" Text="I think it should be KB not kB, SI prefix is K as in Kg, not kg, i.e. should be uppercase" CreationDate="2020-11-12T15:10:53.630" UserId="1384839" ContentLicense="CC BY-SA 4.0" />
    <row Id="114581466" PostId="3758880" Score="2" Text="@slonik, no, kilo is abbreviated with lower-case k. This is the [official publication](https://www.nist.gov/pml/special-publication-330/sp-330-section-3#table7) from nist.gov" CreationDate="2020-11-12T15:22:27.980" UserId="276052" ContentLicense="CC BY-SA 4.0" />
    <row Id="116739895" PostId="3758880" Score="0" Text="`GiB` doesn't look good, for Binary it also better to use `GB` prefix instead of `GiB`, so users can understand it better" CreationDate="2021-02-03T12:34:08.937" UserId="7767664" ContentLicense="CC BY-SA 4.0" />
    <row Id="165584" PostId="326440" Score="0" Text="Quite interesting. What does the channel means. I know that is to avoid block the &quot;thread?&quot; They can be bidirectional ( or that's what I understood ) But, in more simple word, what are they? Can you elaborate further?" CreationDate="2008-11-28T19:07:12.593" UserId="20654" ContentLicense="CC BY-SA 2.5" />
    <row Id="165586" PostId="326440" Score="0" Text="In many ways, a ReadableByteChannel is like an InputStream, and WritableByteChannel is like an OutputStream. Many concrete Channels implement both of these interfaces, so one object is bi-directional. Some channels (SocketChannel) support non-blocking IO, but this isn't true of all channels." CreationDate="2008-11-28T19:11:49.777" UserId="3474" ContentLicense="CC BY-SA 2.5" />
    <row Id="818209" PostId="326440" Score="0" Text="Do you know the time- and memory-efficiencies of this idiom, or can at least estimate? It's a beautiful idiom!" CreationDate="2009-06-17T20:00:36.403" UserId="92272" ContentLicense="CC BY-SA 2.5" />
    <row Id="818316" PostId="326440" Score="3" Text="Technically speaking, it's O(n) in time and space. Qualitatively, due the immutability requirement of Strings, it's pretty hard on memory; temporarily there are two copies of the char data in memory, plus the room for the encoded bytes. Assuming some single-byte encoding, it will (temporarily) require 5 bytes of memory for each character in the file. Since the question asks specifically for a String, that's what I show, but if you can work with the CharBuffer returned by &quot;decode&quot;, the memory requirement is much less. Time-wise, I don't think you'll find anything faster in the core Java libs." CreationDate="2009-06-17T20:16:44.657" UserId="3474" ContentLicense="CC BY-SA 2.5" />
    <row Id="1846775" PostId="326440" Score="5" Text="Possible typo? NIO has a Charset (not CharSet) class called java.nio.charset.Charset. Is this what CharSet should have been?" CreationDate="2009-12-20T22:43:19.163" UserId="28840" ContentLicense="CC BY-SA 2.5" />
    <row Id="3685167" PostId="326440" Score="34" Text="Note : after exercising a bit that code, I found out that you can't reliably delete the file right after reading it with this method, which may be a non issue in some case, but not mine.&#xA;May it be in relation with this issue : http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4715154 ?&#xA;&#xA;I finally went with the proposition of Jon Skeet which doesn't suffer from this bug.&#xA;&#xA;Anyways, I just wanted to give the info, for other people, just in case..." CreationDate="2010-08-19T15:47:54.197" UserId="7059" ContentLicense="CC BY-SA 2.5" />
    <row Id="4453807" PostId="326440" Score="5" Text="@Sébastien Nussbaumer: I also bumped on this problem. Amazing that the bug has been marked &quot;Will Not Fix&quot;. This essentially means that `FileChannel#map` is, in general, unusable." CreationDate="2010-11-09T07:45:15.630" UserId="59279" ContentLicense="CC BY-SA 2.5" />
    <row Id="8212279" PostId="326440" Score="4" Text="@Sébastien Nussbaumer: The bug has been deleted from the Oracle / Sun Bug Database: &quot;This bug is not available.&quot; Google cached the site at http://webcache.googleusercontent.com/search?q=cache:bugs.sun.com/bugdatabase/view_bug.do%3Fbug_id%3D4715154" CreationDate="2011-08-01T12:06:53.890" UserId="361227" ContentLicense="CC BY-SA 3.0" />
    <row Id="27689712" PostId="326440" Score="0" Text="I tried reading an exe file using this method with default charset, append some data in it and again make it an exe, But it corrupted the exe, Any thoughts ?" CreationDate="2013-09-13T07:21:34.963" UserId="1986779" ContentLicense="CC BY-SA 3.0" />
    <row Id="56532150" PostId="3758880" Score="8" Text="@KlitosKyriacou &quot;But officer, I *wasn't* speeding!  By *my* definition of 'kilometer', I was only going 5 km/h.&quot;" CreationDate="2015-12-21T12:17:23.757" UserId="125507" ContentLicense="CC BY-SA 3.0" />
    <row Id="56532816" PostId="3758880" Score="1" Text="@endolith I think a better analogy might be the definition of calories. When a can of diet drink says it contains &quot;Less than 1 calorie&quot;, it uses the colloquial and common definition of &quot;calorie&quot; - it really means kilocalorie. But we know what it means so it's not a big problem." CreationDate="2015-12-21T12:35:48.643" UserId="638028" ContentLicense="CC BY-SA 3.0" />
    <row Id="56535355" PostId="3758880" Score="2" Text="@KlitosKyriacou But is that 1000 calories or 1024 calories?  Units of measurement *are* prescriptive; they wouldn't work otherwise.  &quot;kilo-&quot; has meant &quot;1000&quot; for thousands of years.  Using it to refer to 1024 of something is wrong." CreationDate="2015-12-21T13:44:44.257" UserId="125507" ContentLicense="CC BY-SA 3.0" />
    <row Id="27706163" PostId="326440" Score="1" Text="@smilepleeeaz What you describe makes no sense. EXE files are not text. And they have a well-defined structure. First you are destroying the content of the file by decoding it as text, then you are destroying the structure by appending text to it. How could this fail to corrupt the EXE?" CreationDate="2013-09-13T15:20:20.013" UserId="3474" ContentLicense="CC BY-SA 3.0" />
    <row Id="31682913" PostId="326440" Score="0" Text="I don't really care about encoding, could I just use `Charset.defaultCharset()` instead of having an argument accepting it?" CreationDate="2014-01-11T21:22:12.553" UserId="924313" ContentLicense="CC BY-SA 3.0" />
    <row Id="31685224" PostId="326440" Score="1" Text="@yannbane If you are sure that the file will always be encoded with the platform's default character set, yes, you could do that. If there's a mismatch, then you'll care about encoding." CreationDate="2014-01-11T23:25:12.537" UserId="3474" ContentLicense="CC BY-SA 3.0" />
    <row Id="34546211" PostId="326440" Score="1" Text="As of Java 8, the charset can be omitted to default to using UTF-8. Thus reading all lines becomes `Files.readAllLines(Paths.get(&quot;/your/path/to/file&quot;));`" CreationDate="2014-03-27T02:19:16.743" UserId="1028367" ContentLicense="CC BY-SA 3.0" />
    <row Id="35173158" PostId="326440" Score="0" Text="What is the benefit of this: encoding.decode(ByteBuffer.wrap(encoded)).toString();   versus this: new String(encoded, encoding);" CreationDate="2014-04-11T23:33:45.533" UserId="138513" ContentLicense="CC BY-SA 3.0" />
    <row Id="35173975" PostId="326440" Score="0" Text="@Trejkaz There isn't one! I think that was just carried over from the original code which used a mapped buffer. Thanks for pointing it out." CreationDate="2014-04-12T00:33:31.687" UserId="3474" ContentLicense="CC BY-SA 3.0" />
    <row Id="37074583" PostId="326440" Score="0" Text="magnifico, java 8 solution as well" CreationDate="2014-06-04T20:21:02.543" UserId="1392690" ContentLicense="CC BY-SA 3.0" />
    <row Id="38950336" PostId="326440" Score="0" Text="In my case, I was doing this from a static method so it looked like this:&#xA;    &#xA;    `URL url = NarrationDataProvider.class.getResource(filePath);&#xA;    byte[] encoded = Files.readAllBytes(Paths.get(url.toURI()));&#xA;    return new String(encoded, StandardCharsets.US_ASCII);`" CreationDate="2014-07-30T16:51:36.910" UserId="35274" ContentLicense="CC BY-SA 3.0" />
    <row Id="47588747" PostId="326440" Score="0" Text="Does any of this apply to compilers?" CreationDate="2015-04-19T08:20:16.720" UserId="582917" ContentLicense="CC BY-SA 3.0" />
    <row Id="50267528" PostId="326440" Score="1" Text="I tried using the readFile method of this answer but I can't find where the `Files` class is located.  I'm using JDK 1.7.0_79" CreationDate="2015-06-30T00:24:10.930" UserId="1675209" ContentLicense="CC BY-SA 3.0" />
    <row Id="50267551" PostId="326440" Score="1" Text="@JpajiRajnish [`java.nio.file.Files`](http://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html)" CreationDate="2015-06-30T00:25:38.880" UserId="3474" ContentLicense="CC BY-SA 3.0" />
    <row Id="52244903" PostId="326440" Score="0" Text="Unfortunately this code snippet isn't working in Android." CreationDate="2015-08-24T10:17:21.667" UserId="4936163" ContentLicense="CC BY-SA 3.0" />
    <row Id="52258884" PostId="326440" Score="0" Text="@MiralSarwar &quot;isn't working&quot; isn't a clear problem description. What happens? Which of the four code snippets are you talking about?" CreationDate="2015-08-24T16:01:36.693" UserId="3474" ContentLicense="CC BY-SA 3.0" />
    <row Id="52275678" PostId="326440" Score="0" Text="java.nio.file.Files or java.nio.file.Paths is not supported in Android." CreationDate="2015-08-25T04:02:04.207" UserId="4936163" ContentLicense="CC BY-SA 3.0" />
    <row Id="52301651" PostId="326440" Score="0" Text="@MiralSarwar Well, this question is about Java, not Android, but the Java 6 version (viewable in the edit history) will work on Android." CreationDate="2015-08-25T16:04:17.010" UserId="3474" ContentLicense="CC BY-SA 3.0" />
    <row Id="58125327" PostId="326440" Score="0" Text="The &quot;Character encoding&quot; section needs to go now that you've removed all other references to Apache Commons IO." CreationDate="2016-02-04T15:22:41.033" UserId="15880" ContentLicense="CC BY-SA 3.0" />
    <row Id="58128526" PostId="326440" Score="0" Text="@Powerlord That section has nothing to do with Apache Commons IO. It's completely relevant to core Java NIO." CreationDate="2016-02-04T16:37:49.280" UserId="3474" ContentLicense="CC BY-SA 3.0" />
    <row Id="118423672" PostId="326440" Score="0" Text="@erickson In the paragraph starting with &quot;Technically speaking,&quot;, When you said, &quot;Time-wise, I don't think you'll find anything faster in the core Java libs.&quot;, you meant that the idiom using readAllBytes() is the fastest?" CreationDate="2021-04-08T00:47:31.333" UserId="12528345" ContentLicense="CC BY-SA 4.0" />
    <row Id="119552225" PostId="326440" Score="1" Text="@Sam that comment was from 2009; it does not consider APIs that were created at a later time. Nowadays, there is no reason not to use the newer `Files.readString`. It’s the fastest *and* least memory consuming method. In the reference implementation, it uses tricks that other libraries could not use and avoids the redundant-copies problem. In the best case, there is only one copy of the character data in memory at any time (for iso-latin-1 or all-ascii strings, the I/O buffer will be the resulting string’s backing array without any copy operation)." CreationDate="2021-05-21T13:05:27.950" UserId="2711488" ContentLicense="CC BY-SA 4.0" />
    <row Id="119554106" PostId="326440" Score="0" Text="@Holger is it still the fastest if you want a list of lines, to use ```Files.readString().split(&quot;\n&quot;)```? The docs say that 2GB is too big for this method; what would be the most efficient for files larger than 2GB when you need it all as a string or StringBuffer (assuming a string can't hold that much), or a list of strings, assuming it is too much for a StringBuffer?" CreationDate="2021-05-21T14:09:54.903" UserId="12528345" ContentLicense="CC BY-SA 4.0" />
    <row Id="119557752" PostId="326440" Score="3" Text="@Sam If reading lines works for you, you should consider the final state you want for those strings. The use cases that come to my mind for multi-gigabyte files in memory are caches; these are likely to need some sort of index, and it seems less likely that you'll have a direct use for `List&lt;String&gt;`. So instead of loading the list, and then converting each string to another object, and then adding each of those to some other data structure, you should read one line, convert it to the necessary type, and add it to the structure. Then do the next. Use stream-wise processing." CreationDate="2021-05-21T16:21:15.413" UserId="3474" ContentLicense="CC BY-SA 4.0" />
    <row Id="119599456" PostId="326440" Score="0" Text="@erickson in my case, the objects are windowed every 4 lines, seperated by a blank line in the text file. I did not see any methods for the ```Stream``` class that would help. I am not sure if you intended for the literal use of the ```Stream``` class, or to process the files chunk by chunk. I am not sure how to do the latter ideomatically/in a memory efficient manner." CreationDate="2021-05-23T20:37:41.693" UserId="12528345" ContentLicense="CC BY-SA 4.0" />
    <row Id="119618573" PostId="326440" Score="1" Text="@Sam If your input is one line per record, an actual `Stream` would work, but I was talking more generally. In your case, I think the most idiomatic approach would be to create a `BufferedReader`, and, in a loop, read the five lines representing each record/object in each iteration. If you can do all the necessary processing for that item inside the loop, you won't need to keep a reference, and memory usage will be constant. If you need to keep *all* the objects together after reading the file, you can add them to a suitable collection in the loop." CreationDate="2021-05-24T15:42:03.797" UserId="3474" ContentLicense="CC BY-SA 4.0" />
    <row Id="119625800" PostId="326440" Score="0" Text="Good idea! Thank you!" CreationDate="2021-05-24T21:04:44.777" UserId="12528345" ContentLicense="CC BY-SA 4.0" />
</comments>
